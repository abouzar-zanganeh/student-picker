# 🗺️ گزارش کامل مسیر پروژه: دستیار هوشمند معلم

**نسخه: ۱.۰**
**آخرین به‌روزرسانی: ۲۹ ژوئن ۲۰۲۵**

این سند، تاریخچه کامل، معماری، ساختار داده و منطق اصلی وب‌اپلیکیشن "دستیار هوشمند معلم" را تشریح می‌کند.

---

### ۱. معرفی پروژه

* **نام پروژه:** دستیار هوشمند معلم
* **هدف اصلی:** ساخت یک ابزار وب برای کمک به معلمان جهت انتخاب هوشمند، سریع و عادلانه دانش‌آموزان در فعالیت‌های کلاسی. این ابزار باید قادر به ردیابی عملکرد دانش‌آموزان در جلسات و دسته‌بندی‌های مختلف درسی باشد.
* **پشته فناوری (Tech Stack):** این پروژه به صورت خالص (Vanilla) و فقط با استفاده از سه تکنولوژی اصلی وب توسعه داده شده است:
    * `HTML`: برای ساختار صفحات.
    * `CSS`: برای طراحی و استایل‌دهی.
    * `JavaScript`: برای تمام منطق برنامه.
    * **وابستگی خارجی:** هیچ‌گونه کتابخانه یا فریم‌ورک خارجی در این پروژه استفاده نشده است.

---

### ۲. معماری و ساختار فایل‌ها

پروژه به صورت ماژولار و با تفکیک دغدغه‌ها (Separation of Concerns) سازماندهی شده است:
* `index.html`: فایل اصلی که ساختار تمام صفحات و عناصر رابط کاربری را در خود دارد.
* `style.css`: فایل استایل‌دهی که تمام ظاهر برنامه، از جمله فونت، رنگ‌ها و چیدمان را کنترل می‌کند.
* `script.js`: فایل اصلی منطق برنامه که تمام تعاملات کاربر، مدیریت داده‌ها و الگوریتم‌ها را در خود جای داده است.

---

### ۳. ساختار داده اصلی (Core Data Structure)

این بخش مهم‌ترین قسمت برای درک پروژه است. تمام داده‌های برنامه در یک آبجکت جاوااسکریپт به نام `schoolData` ذخیره شده و از طریق `localStorage` در مرورگر کاربر نگهداری می‌شود.

* **ساختار کلی `schoolData`:**
    ```json
    {
        "نام کلاس ۱": { "... آبجکت کلاس ..." },
        "نام کلاس ۲": { "... آبجکت کلاس ..." }
    }
    ```

* **ساختار یک کلاس:** هر کلاس یک آبجکت است که شامل:
    * `students`: آرایه‌ای از آبجکت‌های دانش‌آموزان.
    * `sessions`: آبجکتی برای نگهداری داده‌های مربوط به هر جلسه.
    * `categories`: آرایه‌ای از رشته‌ها که نام دسته‌بندی‌های تعریف شده برای آن کلاس را نگه می‌دارد.
    ```json
    "کلاس شنبه‌ها": {
        "students": [ ],
        "sessions": { },
        "categories": ["Vocabulary", "Grammar", "Speaking"]
    }
    ```

* **ساختار یک دانش‌آموز:** هر دانش‌آموز یک آبجکت با ساختار زیر است:
    * شمارنده‌های **کلی (Total)**: برای ردیابی عملکرد کلی دانش‌آموز در تمام جلسات و تمام دسته‌بندی‌ها.
    * `sessionData`: یک آبجکت که داده‌های عملکرد دانش‌آموز را به تفکیک **جلسه** و **دسته‌بندی** نگهداری می‌کند.
    ```json
    {
        "name": "علی رضایی",
        "totalCount": 15,
        "totalAbsenceCount": 2,
        "totalProblemCount": 1,
        "sessionData": {
            "1": {
                "Vocabulary": { "count": 2, "absenceCount": 0, "problemCount": 0 },
                "Grammar": { "count": 1, "absenceCount": 1, "problemCount": 0 }
            },
            "2": {
                "Vocabulary": { "count": 1, "absenceCount": 0, "problemCount": 1 },
                "Speaking": { "count": 3, "absenceCount": 0, "problemCount": 0 }
            }
        }
    }
    ```

---

### ۴. تاریخچه و تکامل قابلیت‌ها (تصمیمات کلیدی)

1.  **ایده اولیه و الگوریتم انتخاب:**
    * پروژه با هدف انتخاب عادلانه و غیرقابل‌پیش‌بینی دانش‌آموز شروع شد.
    * یک الگوریتم **"انتخاب وزنی" (Weighted Selection)** طراحی شد که به دانش‌آموزان با تعداد انتخاب کمتر، شانس بیشتری می‌دهد.
    * این الگوریتم به یک **"شکاف تکاملی"** مجهز شد؛ یعنی در ابتدای ترم (`count` کمتر از ۱۰) سخت‌گیرانه‌تر عمل می‌کند و با پیشرفت ترم، تصادفی‌تر می‌شود.

2.  **بهبودهای تجربه کاربری (UX):**
    * **تشخیص شباهت نام:** برای جلوگیری از ورود اسامی تکراری با املای متفاوت، الگوریتم **فاصله لون‌اشتاین (Levenshtein Distance)** پیاده‌سازی شد.
    * **بومی‌سازی:** فونت **"وزیرمتن"** و **اعداد فارسی** برای ایجاد حس بهتر در رابط کاربری، به پروژه اضافه شد.
    * **قابلیت‌های حرفه‌ای:** امکان حذف سریع با `Ctrl+Click` و ریست کردن شمارنده‌ها از طریق کنسول مرورگر اضافه شد.

3.  **مدیریت داده‌ها:**
    * قابلیت **ورود لیست دانش‌آموزان** از طریق **فایل CSV** و **Paste کردن مستقیم** از کلیپ‌بورد، به همراه یک صفحه پیش‌نمایش، پیاده‌سازی شد.

4.  **بازطراحی ساختاری:**
    * بخش "مدیریت دانش‌آموزان" به یک **صفحه تنظیمات (⚙️)** جداگانه منتقل شد.
    * برای مدیریت سناریوهای واقعی کلاس، قابلیت **"ثبت وضعیت"** (غایب/مشکل) با دکمه‌های Toggle به برنامه اضافه شد.

5.  **سیستم واگرد (Undo):**
    * به جای پیغام‌های تأیید قدیمی (`confirm`)، یک سیستم **واگرد موقت و مدرن (Toast/Snackbar)** فقط برای عملیات **حذف** پیاده‌سازی شد.
    * این سیستم به یک مکانیزم **"واگرد دسته‌ای" (Batch Undo)** مجهز شد تا با حذف‌های سریع و پیاپی، تنها با یک کلیک بتوان تمام آن‌ها را به حالت قبل بازگرداند.

---

### ۵. گردش کار فعلی کاربر (Current Workflow)

1.  کاربر یک کلاس می‌سازد یا انتخاب می‌کند.
2.  وارد صفحه "انتخاب جلسه" می‌شود و یک جلسه جدید را شروع می‌کند یا وارد یک جلسه قبلی می‌شود.
3.  در صفحه انتخاب دانش‌آموز، ابتدا یک "دسته‌بندی پرسش" را از طریق دکمه‌های موجود انتخاب می‌کند.
4.  با فعال شدن دکمه اصلی، روی «انتخاب نفر بعدی!» کلیک می‌کند.
5.  برنامه بر اساس آمار **همان دسته‌بندی در همان جلسه**، یک دانش‌آموز را انتخاب می‌کند.
6.  نام دانش‌آموز به همراه آمار همان جلسه و دکمه‌های "غایب" و "مشکل" نمایش داده می‌شود.
7.  کاربر می‌تواند وضعیت دانش‌آموز را ثبت کرده یا به سراغ انتخاب نفر بعدی برود.

---

### ۶. پروتکل همکاری و همگام‌سازی

به دلیل بروز ناهماهنگی در نسخه‌های کد، یک پروتکل قطعی برای همکاری تعریف شد:
* کاربر همواره نسخه‌های نهایی و کامل هر سه فایل (`index.html`, `style.css`, `script.js`) را به عنوان **نسخه مرجع** آپلود می‌کند.
* هوش مصنوعی با محاسبه **اثر انگشت دیجیتال (SHA-256)** برای هر فایل و ارائه آن به کاربر، صحت دریافت نسخه صحیح را تأیید می‌کند.
* تمام تغییرات بعدی به صورت **ماژولار** و با دستورالعمل‌های دقیق "پیدا کن و جایگزین کن" روی نسخه مرجع تأیید شده اعمال می‌شود.

این گزارش به شما کمک می‌کند تا درک کاملی از وضعیت فعلی پروژه، معماری و تاریخچه تصمیمات آن داشته باشید.